# API component for Energy Pebble - Using capture_response
# Based on ESPHome documentation example

# HTTP request component
http_request:
  useragent: ESPHome
  timeout: 15s
  verify_ssl: false
  id: http_request_data
  watchdog_timeout: 15s

# Global variables to store the fetched data
globals:
  - id: current_hour_color
    type: std::string
    initial_value: '"G"'
  - id: next_8_hours
    type: std::string
    initial_value: '"G,G,G,G,G,G,G,G"'
  - id: api_fetch_success
    type: bool
    initial_value: 'false'
  - id: leds_set_from_api
    type: bool
    initial_value: 'false'

# Text sensors are now defined in 01_interface_order.yaml for web UI ordering

# Buttons are now defined in 01_interface_order.yaml for web UI ordering

# Interval to automatically fetch data every 15 minutes (with initial delay)
interval:
  - interval: 15min
    startup_delay: 60s
    then:
      - script.execute: simple_api_call

# Time-based trigger for start of every hour  
time:
  - platform: sntp
    id: api_time
    on_time:
      # Trigger at minute 0 of every hour (xx:00:00)
      - seconds: 0
        minutes: 0
        then:
          - logger.log:
              level: INFO
              format: "Top of hour - fetching fresh API data"
          - script.execute: simple_api_call
      # Also trigger at minute 1 as backup (xx:01:00) 
      - seconds: 0
        minutes: 1
        then:
          - script.execute: simple_api_call

# Simple script - call API and log full JSON response
script:
  - id: simple_api_call
    then:
      - if:
          condition:
            wifi.connected:
          then:
            - logger.log: 
                level: INFO
                format: "WiFi connected - Fetching LED color data from API..."
            - http_request.get:
                id: http_request_data
                url: "https://energypebble.tdlx.nl/api/color-code"
                request_headers:
                  X-Device-ID: !lambda |-
                    uint64_t mac = ESP.getEfuseMac();
                    static char mac_str[13];
                    sprintf(mac_str, "%012llx", mac);
                    return mac_str;
                capture_response: true
                on_response:
                  then:
                    - logger.log:
                        level: INFO  
                        format: "Got LED statusAPI response"
                    - lambda: |-
                        if (response->status_code == 200) {
                          // Parse JSON to extract color codes
                          json::parse_json(body, [](JsonObject root) -> bool {
                            if (root["hour_color_codes"]) {
                              JsonArray hour_codes = root["hour_color_codes"];
                              int total_hours = hour_codes.size();
                              
                              if (total_hours > 0) {
                                // Get current hour (first element)
                                JsonObject first_hour = hour_codes[0];
                                if (first_hour["color_code"]) {
                                  const char* current_color = first_hour["color_code"];
                                  id(current_hour_color) = std::string(current_color);
                                }
                                
                                // Build string for next 9 hours (current + 8 future)
                                std::string next_hours = "";
                                int hours_to_show = std::min(9, total_hours);
                                for (int i = 0; i < hours_to_show; i++) {
                                  if (i > 0) next_hours += ",";
                                  JsonObject hour_obj = hour_codes[i];
                                  if (hour_obj["color_code"]) {
                                    const char* color = hour_obj["color_code"];
                                    next_hours += std::string(color);
                                  }
                                }
                                id(next_8_hours) = next_hours;
                                
                                // Update text sensors with new values
                                id(current_color_code).publish_state(id(current_hour_color));
                                id(next_8_hours_colors).publish_state(id(next_8_hours));
                                
                                id(api_fetch_success) = true;
                                id(api_status).publish_state("OK");
                                
                                // Set LED colors with API data
                                // Define color and brightness constants
                                const float center_brightness = 1.0f;
                                const float ring_brightness = 0.25f;
                                
                                // Color definitions (RGB values)
                                const float green_r = 0.0f, green_g = 1.0f, green_b = 0.0f;
                                const float yellow_r = 1.0f, yellow_g = 1.0f, yellow_b = 0.0f;
                                const float red_r = 1.0f, red_g = 0.0f, red_b = 0.0f;
                                
                                // Helper function to set LED color
                                auto set_led = [&](esphome::light::LightState* led, const std::string& color, float brightness) {
                                  auto call = led->turn_on();
                                  call.set_brightness(brightness);
                                  
                                  if (color == "G") {
                                    call.set_rgb(green_r, green_g, green_b);
                                  } else if (color == "Y") {
                                    call.set_rgb(yellow_r, yellow_g, yellow_b);
                                  } else if (color == "R") {
                                    call.set_rgb(red_r, red_g, red_b);
                                  } else {
                                    call.set_rgb(0.5f, 0.5f, 0.5f); // Default gray
                                  }
                                  call.perform();
                                };
                                
                                // Parse the comma-separated string to get individual colors
                                std::vector<std::string> colors;
                                
                                // Simple string splitting
                                size_t start = 0;
                                size_t end = next_hours.find(',');
                                
                                while (end != std::string::npos) {
                                  colors.push_back(next_hours.substr(start, end - start));
                                  start = end + 1;
                                  end = next_hours.find(',', start);
                                }
                                // Add the last color (no comma after it)
                                colors.push_back(next_hours.substr(start));
                                
                                // Set center LED (current hour - index 0)
                                if (!colors.empty()) {
                                  set_led(id(center_led), colors[0], center_brightness);
                                }
                                
                                // Set ring segments (next 8 hours - indices 1-8)
                                esphome::light::LightState* segments[] = {
                                  id(ring_segment_1), id(ring_segment_2), id(ring_segment_3), id(ring_segment_4),
                                  id(ring_segment_5), id(ring_segment_6), id(ring_segment_7), id(ring_segment_8)
                                };
                                
                                for (int i = 0; i < 8 && (i + 1) < colors.size(); i++) {
                                  set_led(segments[i], colors[i + 1], ring_brightness);
                                }
                                
                                // Mark that LEDs have been set from API data
                                id(leds_set_from_api) = true;
                                
                                return true;
                              }
                            }
                            id(api_fetch_success) = false;
                            id(api_status).publish_state("Error");
                            return false;
                          });
                        } else {
                          id(api_fetch_success) = false;
                          id(api_status).publish_state("Error");
                        }
          else:
            - logger.log:
                level: INFO
                format: "WiFi not connected - skipping API call"
