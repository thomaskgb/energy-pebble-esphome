# OTA Update Check - 12 hour interval

substitutions:
  current_version: !env_var version "unknown"

# Global variables for OTA update
globals:
  - id: ota_url
    type: std::string
    initial_value: '""'
  - id: ota_md5
    type: std::string
    initial_value: '""'

# ESPHome OTA component for firmware updates
ota:
  - platform: esphome
    id: esphome_ota
  - platform: http_request
    id: http_ota

# Two buttons: Check for updates and Install updates
button:
  - platform: template
    name: "Check for Updates"
    id: manual_ota_check
    on_press:
      - script.execute: check_firmware_update

  - platform: template
    name: "Install Latest Update" 
    id: manual_update_install
    on_press:
      - if:
          condition:
            wifi.connected:
          then:
            - logger.log:
                level: INFO
                format: "🔄 Starting HTTP OTA update..."
            - text_sensor.template.publish:
                id: update_status_sensor
                state: "Fetching update info..."
            - script.execute: perform_ota_update
          else:
            - logger.log:
                level: WARN
                format: "⚠️  WiFi not connected - cannot install update"
            - text_sensor.template.publish:
                id: update_status_sensor
                state: "No WiFi - update failed"

# Text sensors to display version information
text_sensor:
  - platform: template
    name: "Current Firmware Version"
    id: current_version_sensor
    update_interval: 60s
    lambda: |-
      return {"v${current_version}"};
  
  - platform: template
    name: "Update Status"
    id: update_status_sensor
    update_interval: 60s
    lambda: |-
      return {"Ready for update check"};

# Interval to automatically check for updates every 12 hours
interval:
  - interval: 12h
    startup_delay: 300s  # Wait 5 minutes after boot
    then:
      - script.execute: check_firmware_update

# Scripts for OTA functionality
script:
  - id: check_firmware_update
    then:
      - if:
          condition:
            wifi.connected:
          then:
            - logger.log: 
                level: INFO
                format: "=== OTA UPDATE CHECK STARTED ==="
            - logger.log: 
                level: INFO
                format: "Current firmware version: v${current_version}"
            - http_request.get:
                id: http_request_data
                url: "https://energypebble.tdlx.nl/api/firmware/latest-stable"
                request_headers:
                  Connection: "close"
                  User-Agent: "ESPHome-OTA/1.0"
                  X-Device-ID: !lambda |-
                    uint64_t mac = ESP.getEfuseMac();
                    static char mac_str[13];
                    sprintf(mac_str, "%012llx", mac);
                    return mac_str;
                capture_response: true
                on_response:
                  then:
                    - lambda: |-
                        if (response->status_code == 200) {
                          json::parse_json(body, [](JsonObject root) -> bool {
                            if (root["version"]) {
                              std::string latest_version = root["version"];
                              std::string current = "v${current_version}"; // Current firmware version
                              
                              ESP_LOGI("OTA", "Latest stable version from server: %s", latest_version.c_str());
                              ESP_LOGI("OTA", "Comparing versions - Current: %s vs Latest Stable: %s", current.c_str(), latest_version.c_str());
                              
                              // Simple version comparison - assumes format vX.Y.Z
                              auto parse_version = [](const std::string& v) {
                                std::string clean = v.substr(1); // Remove 'v' prefix
                                int major = 0, minor = 0, patch = 0;
                                sscanf(clean.c_str(), "%d.%d.%d", &major, &minor, &patch);
                                return std::make_tuple(major, minor, patch);
                              };
                              
                              auto current_ver = parse_version(current);
                              auto latest_ver = parse_version(latest_version);
                              
                              int curr_maj = std::get<0>(current_ver);
                              int curr_min = std::get<1>(current_ver);
                              int curr_pat = std::get<2>(current_ver);
                              
                              int new_maj = std::get<0>(latest_ver);
                              int new_min = std::get<1>(latest_ver);
                              int new_pat = std::get<2>(latest_ver);
                              
                              bool update_available = (new_maj > curr_maj) || 
                                                    (new_maj == curr_maj && new_min > curr_min) ||
                                                    (new_maj == curr_maj && new_min == curr_min && new_pat > curr_pat);
                              
                              if (update_available) {
                                ESP_LOGI("OTA", "🔄 UPDATE AVAILABLE!");
                                ESP_LOGI("OTA", "   Current version: %s", current.c_str());
                                ESP_LOGI("OTA", "   Latest stable version: %s", latest_version.c_str());
                                if (root["download_url"]) {
                                  std::string download_url = root["download_url"];
                                  ESP_LOGI("OTA", "   Download URL: %s", download_url.c_str());
                                }
                                
                                // Display release notes if available
                                if (root["release_notes"]) {
                                  std::string release_notes = root["release_notes"];
                                  ESP_LOGI("OTA", "   Release Notes: %s", release_notes.c_str());
                                }
                                
                                // Update status sensor - detection only
                                id(update_status_sensor).publish_state("Update available: " + latest_version);
                                ESP_LOGI("OTA", "✅ Use 'Install Latest Update' button to install");
                                ESP_LOGI("OTA", "=== UPDATE CHECK COMPLETE - UPDATE AVAILABLE ===");
                              } else {
                                ESP_LOGI("OTA", "✅ Firmware is up to date - no action needed");
                                id(update_status_sensor).publish_state("Up to date");
                                ESP_LOGI("OTA", "=== UPDATE CHECK COMPLETE - NO UPDATES ===");
                              }
                              return true;
                            }
                            return false;
                          });
                        } else {
                          ESP_LOGW("OTA", "❌ UPDATE CHECK FAILED!");
                          ESP_LOGW("OTA", "   HTTP Status: %d", response->status_code);
                          ESP_LOGW("OTA", "   Server response: %s", body.c_str());
                          ESP_LOGW("OTA", "=== UPDATE CHECK COMPLETE - ERROR ===");
                          id(update_status_sensor).publish_state("Check failed - HTTP " + std::to_string(response->status_code));
                        }
          else:
            - logger.log:
                level: WARN
                format: "⚠️  WiFi not connected - cannot check for updates"
            - logger.log:
                level: INFO  
                format: "=== UPDATE CHECK SKIPPED - NO WIFI ==="
            - text_sensor.template.publish:
                id: update_status_sensor
                state: "No WiFi - check skipped"

  - id: perform_ota_update
    then:
      - logger.log:
          level: INFO
          format: "Getting latest firmware info for OTA update..."
      - http_request.get:
          id: http_request_data
          url: "https://energypebble.tdlx.nl/api/firmware/latest-stable"
          request_headers:
            Connection: "close"
            User-Agent: "ESPHome-OTA/1.0"
            X-Device-ID: !lambda |-
              uint64_t mac = ESP.getEfuseMac();
              static char mac_str[13];
              sprintf(mac_str, "%012llx", mac);
              return mac_str;
          capture_response: true
          on_response:
            then:
              - lambda: |-
                  if (response->status_code == 200) {
                    json::parse_json(body, [](JsonObject root) -> bool {
                      if (root["download_url"] && root["md5_hash"]) {
                        std::string download_url = root["download_url"];
                        std::string md5_hash = root["md5_hash"];
                        std::string sha256_hash = "";
                        
                        // Get SHA-256 hash if available for additional security logging
                        if (root["sha256_hash"]) {
                          sha256_hash = root["sha256_hash"].as<const char*>();
                          ESP_LOGI("OTA", "SHA-256 hash for verification: %s", sha256_hash.c_str());
                        }
                        
                        ESP_LOGI("OTA", "Starting HTTP OTA update from: %s", download_url.c_str());
                        ESP_LOGI("OTA", "Expected MD5: %s", md5_hash.c_str());
                        
                        // Set global variables for OTA action
                        id(ota_url) = download_url;
                        id(ota_md5) = md5_hash;
                        return true;
                      }
                      return false;
                    });
                  } else {
                    ESP_LOGW("OTA", "Failed to get update info - HTTP %d", response->status_code);
                    id(update_status_sensor).publish_state("Update failed - check logs");
                  }
              - if:
                  condition:
                    lambda: 'return !id(ota_url).empty() && !id(ota_md5).empty();'
                  then:
                    - logger.log:
                        level: INFO
                        format: "Performing HTTP OTA update..."
                    - text_sensor.template.publish:
                        id: update_status_sensor
                        state: "Installing update..."
                    - ota.http_request.flash:
                        url: !lambda 'return id(ota_url);'
                        md5: !lambda 'return id(ota_md5);'
                  else:
                    - logger.log:
                        level: ERROR
                        format: "❌ Failed to get OTA URL or MD5 hash"
                    - text_sensor.template.publish:
                        id: update_status_sensor
                        state: "Update failed - missing data"